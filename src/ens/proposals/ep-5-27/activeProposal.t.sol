// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test } from "@forge-std/src/Test.sol";
import { console2 } from "@forge-std/src/console2.sol";

import { INameWrapper } from "@ens/interfaces/INameWrapper.sol";
import { IMetadataService } from "@ens/interfaces/IMetadataService.sol";
import { TransparentUpgradeableProxy } from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";

import { ENS_Governance } from "@ens/ens.t.sol";

contract Proposal_ENS_EP_5_27_Test is ENS_Governance {
    INameWrapper nameWrapper = INameWrapper(0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401);

    bytes proposalCalldata =
        hex"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d4416b13d2b3a9abae7acd5d6c2bbdbe25686401000000000000000000000000d4416b13d2b3a9abae7acd5d6c2bbdbe256864010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000241534e177000000000000000000000000abb76d7e79de010117b147761013f11630a6799f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004715018a600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000072423205b455020352e32375d5b45786563757461626c655d205265766f6b65207468652044414f2773206162696c69747920746f207570677261646520746865206e616d6520777261707065720a23232041627374726163740a0a546865204e616d652057726170706572e28099732075706772616465206d656368616e69736d20636f6e7461696e7320612076756c6e65726162696c69747920776865726562792061206d616c6963696f75732044414f20636f756c6420757365207468652075706772616465206d656368616e69736d20746f207365697a6520636f6e74726f6c206f662077726170706564206e616d657320776974686f757420746865206f776e6572e280997320636f6e73656e742c20646f63756d656e746564c2a05b686572655d2868747470733a2f2f646973637573732e656e732e646f6d61696e732f742f73656375726974792d61647669736f72792d612d6d616c6963696f75732d64616f2d7570646174652d636f756c642d7265647563652d7468652d726567697374726174696f6e2d6475726174696f6e2d6f662d726567697374657265642d6574682d326c64732f31373537362f31292e0a0a53696e636520746865207632206d6967726174696f6e20706c616e206d616b6573207468652075706772616465206d656368616e69736d206f62736f6c6574652c207765206e6f77206b6e6f7720746865206d656368616e69736d2077696c6c206e657665722062652072657175697265642e20546869732045502070726f706f73657320746f2072656d6f7665207468652044414fe2809973206162696c69747920746f207570677261646520746865206e616d6520777261707065722e0a0a23232053706563696669636174696f6e0a0a41646d696e20636f6e74726f6c206f76657220746865206e616d652077726170706572206769766573207468652044414f2074776f2066756e6374696f6e733a2069742063616e2073657420746865207570677261646520636f6e74726163742c20616e642069742063616e2073706563696679207468652061646472657373206f6620746865206d6574616461746120636f6e74726163742e2053696e63652077652077616e7420746f2072656d6f76652074686520666f726d6572206162696c697479207768696c652070726573657276696e6720746865206c61747465722c2077652070726f706f73652074686520666f6c6c6f77696e672073657175656e6365206f6620616374696f6e733a0a0a312e204465706c6f792061206e6577206d6574616461746120636f6e74726163742c206964656e746963616c20746f207468652063757272656e74206f6e6520627574207573696e6720612070726f78792e205468652070726f787920696e7374616e63652073686f756c64206265206f776e6564206279207468652044414f20746f2070726f7669646520666f7220667574757265206d657461646174612075706772616465732e0a322e2055706461746520746865206e616d65207772617070657220746f207265666572656e636520746865206e6577206d6574616461746120636f6e747261637420696e7374656164206f6620746865206f6c64206f6e652e0a332e205265766f6b652061646d696e206f776e657273686970206f76657220746865206e616d6520777261707065722e0a0a41206e6577206d65746164617461207365727669636520686173206265656e206465706c6f796564206174203078383036663834463337383966353133353243314230614233664661313932363635643238333830382c20616e642061207472616e73706172656e742070726f787920776173206465706c6f79656420696e207472616e73616374696f6e203078643061636131663265666232646235653364343934363439303034653334316465636232653934613166333065393466333031623636323637303265653463382c2061742061646472657373203078616262373664376537396465303130313137623134373736313031336631313633306136373939662c20776974682074686520696e697469616c20696d706c656d656e746174696f6e2073657420746f207468652061626f766520616464726573732c20616e6420746865206f776e65722073657420746f2077616c6c65742e656e7364616f2e6574682e205468652061646d696e20636f6e747261637420666f7220746869732070726f7879206973206174203078656165393330396464623161616462346366316562616435653531616566393939383333613939322e0a0a0a0a5468652065786563757461626c6520636f6d706f6e656e74206f6620746869732070726f706f73616c207365747320746865206d6574616461746120736572766963652061646472657373206f6e20746865206e616d65207772617070657220746f207468652061626f76652070726f78792c207468656e207265766f6b6573206f776e657273686970206f7665722069742e00000000000000000000000000000000000000000000000000000000";

    function _selectFork() public override {
        vm.createSelectFork({ blockNumber: 21_378_687, urlOrAlias: "mainnet" });
    }

    function _proposer() public pure override returns (address) {
        return 0xb8c2C29ee19D8307cb7255e1Cd9CbDE883A267d5; // nick.eth
    }

    function _beforeExecution() public view override {
        address owner = nameWrapper.owner();
        assertEq(owner, address(timelock));

        IMetadataService metadataService = IMetadataService(0x3A368e3D5F19aF3DE594A9fC2CFfc6e256a616c7);
        assertEq(address(nameWrapper.metadataService()), address(metadataService));
    }

    function _generateCallData()
        public
        override
        returns (address[] memory, uint256[] memory, string[] memory, bytes[] memory, string memory)
    {
        (targets, values, calldatas, description) =
            abi.decode(proposalCalldata, (address[], uint256[], bytes[], string));

        TransparentUpgradeableProxy proxy =
            TransparentUpgradeableProxy(payable(0xaBB76D7e79de010117B147761013f11630a6799f));

        bytes[] memory internalCalldatas = new bytes[](2);
        internalCalldatas[0] = abi.encodeWithSelector(INameWrapper.setMetadataService.selector, address(proxy));
        internalCalldatas[1] = abi.encodeWithSelector(Ownable.renounceOwnership.selector);

        bytes memory expectedCalldata = abi.encode(targets, values, internalCalldatas, description);

        assertEq(calldatas, internalCalldatas);
        assertEq(proposalCalldata, expectedCalldata);

        return (targets, values, signatures, calldatas, description);
    }

    function _afterExecution() public view override {
        address owner = nameWrapper.owner();
        assertEq(owner, address(0));
    }

    function _isProposalSubmitted() public pure override returns (bool) {
        return true;
    }
}
