// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test } from "@forge-std/src/Test.sol";
import { console2 } from "@forge-std/src/console2.sol";

import { ENS_Governance } from "@ens/ens.t.sol";
import { IENSRoot } from "@ens/interfaces/IENSRoot.sol";
import { IENSRegistryWithFallback } from "@ens/interfaces/IENSRegistryWithFallback.sol";

contract Proposal_ENS_EP_6_7_Test is ENS_Governance {
    IENSRoot root = IENSRoot(0xaB528d626EC275E3faD363fF1393A41F581c5897);
    IENSRegistryWithFallback ensRegistry = IENSRegistryWithFallback(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);


    address DNSRegistrar = 0xB32cB5677a7C971689228EC835800432B339bA2B;

    bytes proposalCalldata =
        hex"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ab528d626ec275e3fad363ff1393a41f581c5897000000000000000000000000ab528d626ec275e3fad363ff1393a41f581c58970000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044e0dba60f000000000000000000000000fe89cc7abb2c4183683ab71653c4cdc9b02d44b700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000448cb8ececa695017707ee0c04095f723270b3c315654d16e337ad54039175a4b000894676000000000000000000000000b32cb5677a7c971689228ec835800432b339ba2b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a423205b362e375d205b45786563757461626c655d205472616e73666572202e63656f20544c4420746f2074686520444e53534543207265676973747261720a7c202a2a5374617475732a2a2020202020202020202020207c2050656e64696e6720202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020207c0a7c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d207c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d207c0a7c202a2a44697363757373696f6e205468726561642a2a207c205b466f72756d5d2868747470733a2f2f646973637573732e656e732e646f6d61696e732f742f74656d702d636865636b2d65786563757461626c652d7472616e736665722d63656f2d746c642d746f2d7468652d646e737365632d7265676973747261722f323035393429207c0a0a23232041627374726163740a0a546865202e63656f20544c442c20666f726d65726c79206f776e6564206279204b726564205074792c206861732073696e6365206265656e2061637175697265642062792058595a2e205072696f7220746f2074686520666f726d6174696f6e206f66207468652044414f2c207468652070726576696f7573206f776e65722061736b656420666f72202e63656f20746f2062652064656c65676174656420746f206120637573746f6d206164647265737320736f20746865792063616e206d616e616765206120626573706f6b6520444e5320696e746567726174696f6e2e20546865206e6577206f776e6572206861732072657175657374656420746861742074686973206368616e676520626520756e646f6e652c20616e642074686174206f776e657273686970206f66202e63656f20626520726576657274656420746f2074686520444e535345432072656769737472617220736f206f776e657273206f66202e63656f20544c44732063616e2075736520746865207374616e6461726420696e746567726174696f6e20746f20636c61696d207468656972206e616d6573206f6e20454e532e0a0a546f2070726f7665206f776e657273686970206f66202e63656f20616e6420746865697220696e74656e74696f6e207468617420776520616374696f6e207468697320726571756573742c2074686579206861766520736574206120545854207265636f7264206f6e20605f656e732e6e69632e63656f6020746f207468652061646472657373206f662074686520444e53534543207265676973747261722c2060307842333263423536373761374339373136383932323845433833353830303433324233333962413242602e20546869732063616e20626520766572696669656420776974682074686520666f6c6c6f77696e6720636f6d6d616e643a0a0a6060600a64696720545854205f656e732e6e69632e63656f0a6060600a0a23232053706563696669636174696f6e0a0a43616c6c20607365745375626e6f64654f776e657260206f6e2074686520454e532060526f6f746020636f6e74726163742061742060307861423532386436323645433237354533666144333633664631333933413431463538316335383937602c2070617373696e6720696e20746865206b656363616b3235362068617368206f66206063656f6020616e64207468652061646472657373206f662074686520444e53534543207265676973747261722c2060307842333263423536373761374339373136383932323845433833353830303433324233333962413242602e00000000000000000000000000000000000000000000000000000000";

    function _selectFork() public override {
        vm.createSelectFork({ blockNumber: 22_332_663, urlOrAlias: "mainnet" });
    }

    function _proposer() public pure override returns (address) {
        return 0xb8c2C29ee19D8307cb7255e1Cd9CbDE883A267d5; // nick.eth
    }

    function _beforeProposal() public override {
        assertEq(root.controllers(address(timelock)), false);
        assertNotEq(ensRegistry.owner(namehash("ceo")), DNSRegistrar);
    }

    function _generateCallData()
        public
        override
        returns (address[] memory, uint256[] memory, string[] memory, bytes[] memory, string memory)
    {
        (,,, description) =
            abi.decode(proposalCalldata, (address[], uint256[], bytes[], string));

        uint256 numTransactions = 2;

        targets = new address[](numTransactions);
        values = new uint256[](numTransactions);
        calldatas = new bytes[](numTransactions);
        signatures = new string[](numTransactions);

        // 1. Set the timelock as a controller of the ENS root
        targets[0] = address(root);
        values[0] = 0;
        calldatas[0] = abi.encodeWithSelector(IENSRoot.setController.selector, timelock, true);
        signatures[0] = "";

        // 2. Set the offchainDNSRegistrar as the owner of the ceo TLD
        targets[1] = address(root);
        values[1] = 0;
        calldatas[1] = abi.encodeWithSelector(IENSRoot.setSubnodeOwner.selector, labelhash("ceo"), DNSRegistrar);
        signatures[1] = "";
        
        // Verify the calldata is correct
        bytes memory expectedCalldata = abi.encode(targets, values, calldatas, description);
        assertEq(proposalCalldata, expectedCalldata);

        return (targets, values, signatures, calldatas, description);
    }

    function _afterExecution() public view override {
        assertEq(root.controllers(address(timelock)), true);
        assertEq(ensRegistry.owner(namehash("ceo")), DNSRegistrar);
    }

    function _isProposalSubmitted() public pure override returns (bool) {
        return true;
    }
}