// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test } from "@forge-std/src/Test.sol";
import { console2 } from "@forge-std/src/console2.sol";

import { ENS_Governance } from "@ens/ens.t.sol";

interface ENSRoot {
    function controllers(address) external view returns (bool);
    function setController(address controller, bool enabled) external;
    function setSubnodeOwner(bytes32 label, address owner) external returns (bytes32);
}

interface ENSRegistry {
    function owner(bytes32 node) external view returns (address);
}

contract Proposal_ENS_EP_6_9_Test is ENS_Governance {
    ENSRoot registry = ENSRoot(0xaB528d626EC275E3faD363fF1393A41F581c5897);
    address legacyMultisig = 0xCF60916b6CB4753f58533808fA610FcbD4098Ec0;

    bytes proposalCalldata =
        hex"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ab528d626ec275e3fad363ff1393a41f581c589700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000044e0dba60f000000000000000000000000cf60916b6cb4753f58533808fa610fcbd4098ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040e23205b4550362e375d205b45786563757461626c655d205265766f6b6520726f6f7420636f6e74726f6c6c657220726f6c652066726f6d206c656761637920454e53206d756c74697369670a23200a0a7c202a2a5374617475732a2a2020202020202020202020207c2041637469766520202020202020202020202020202020202020202020202020202020202020202020202020207c0a7c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d207c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d207c0a7c202a2a44697363757373696f6e205468726561642a2a207c205b466f72756d5d2868747470733a2f2f646973637573732e656e732e646f6d61696e732f742f65702d362d382d65786563757461626c652d7265766f6b652d726f6f742d636f6e74726f6c6c65722d726f6c652d66726f6d2d6c65676163792d656e732d6d756c74697369672f323036343429207c0a0a23232041627374726163740a0a57652068617665206964656e746966696564207468617420746865206c656761637920454e53206d756c74697369672c207768696368206f726967696e616c6c7920636f6e74726f6c6c656420454e53206265666f7265207468652044414f2077617320637265617465642c207374696c6c20686173207468652027636f6e74726f6c6c65722720726f6c65206f6e2074686520454e5320726f6f742e2054686973206d65616e7320746861742061206d616a6f72697479206f66206d756c7469736967206b6579686f6c6465727320636f756c6420637265617465206f72207265706c61636520616e7920454e5320544c44206f74686572207468616e202e6574682e202e657468206973206c6f636b656420616e642063616e6e6f74206265206d6f646966696564206279207468652044414f206f7220616e796f6e6520656c73652e0a0a496e206f7264657220746f20636f72726563742074686973206f76657273696768742c20746869732070726f706f73616c207265766f6b657320746865206c6567616379206d756c7469736967277320636f6e74726f6c6c657220726f6c652066726f6d2074686520726f6f7420636f6e74726163742e0a0a23232053706563696669636174696f6e0a0a43616c6c2060736574436f6e74726f6c6c657260206f6e2074686520454e532060526f6f746020636f6e74726163742061742060307861423532386436323645433237354533666144333633664631333933413431463538316335383937602c2070617373696e6720696e207468652061646472657373206f6620746865206c6567616379206d756c74697369672c2060307843463630393136623643423437353366353835333338303866413631304663624434303938456330602e000000000000000000000000000000000000";

    function _selectFork() public override {
        vm.createSelectFork({ blockNumber: 22_337_300, urlOrAlias: "mainnet" });
    }

    function _proposer() public pure override returns (address) {
        return 0xb8c2C29ee19D8307cb7255e1Cd9CbDE883A267d5; // nick.eth
    }

    function _beforeExecution() public override {
        assertTrue(registry.controllers(address(legacyMultisig)));
    }

    function _generateCallData()
        public
        override
        returns (address[] memory, uint256[] memory, string[] memory, bytes[] memory, string memory)
    {
        (targets, values, calldatas, description) =
            abi.decode(proposalCalldata, (address[], uint256[], bytes[], string));

        bytes[] memory internalCalldatas = new bytes[](1);
        internalCalldatas[0] = abi.encodeWithSelector(ENSRoot.setController.selector, legacyMultisig, false);

        bytes memory expectedCalldata = abi.encode(targets, values, internalCalldatas, description);

        assertEq(calldatas, internalCalldatas);
        assertEq(proposalCalldata, expectedCalldata);

        return (targets, values, signatures, calldatas, description);
    }

    function _afterExecution() public view override {
        assertFalse(registry.controllers(address(legacyMultisig)));
    }

    function _isProposalSubmitted() public pure override returns (bool) {
        return true;
    }
}
