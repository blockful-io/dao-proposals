// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test } from "@forge-std/src/Test.sol";
import { console2 } from "@forge-std/src/console2.sol";

import { ENS_Governance } from "@ens/ens.t.sol";

interface ENSRoot {
    function controllers(address) external view returns (bool);
    function setController(address controller, bool enabled) external;
    function setSubnodeOwner(bytes32 label, address owner) external returns (bytes32);
    function resolver(bytes32 node) external view returns (address);
    function setResolver(bytes32 node, address resolver) external;
    function owner(bytes32 node) external view returns (address);
    function setOwner(bytes32 node, address owner) external;
}

interface ENSRegistry {
    function owner(bytes32 node) external view returns (address);
    function setOwner(bytes32 node, address owner) external;
}

contract Proposal_ENS_EP_6_12_Test is ENS_Governance {
    ENSRoot root = ENSRoot(0xaB528d626EC275E3faD363fF1393A41F581c5897);
    ENSRegistry ensRegistry = ENSRegistry(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);
    address dnsSecResolver = 0xF142B308cF687d4358410a4cB885513b30A42025;

    address dnsSecRegistrar = 0xB32cB5677a7C971689228EC835800432B339bA2B;

    bytes proposalCalldata =
        hex"00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ab528d626ec275e3fad363ff1393a41f581c589700000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000448cb8ececa695017707ee0c04095f723270b3c315654d16e337ad54039175a4b000894676000000000000000000000000fe89cc7abb2c4183683ab71653c4cdc9b02d44b70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000441896f70a6871d4785070006a666d91b45c606e933e44f42b06ef5bda56431e78ce28553f000000000000000000000000f142b308cf687d4358410a4cb885513b30a420250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000445b0fc9c36871d4785070006a666d91b45c606e933e44f42b06ef5bda56431e78ce28553f000000000000000000000000b32cb5677a7c971689228ec835800432b339ba2b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079623205b4550362e31325d205b45786563757461626c655d20536574207265736f6c76657220666f72202e63656f20544c440a23205c5b4550362e31325d205c5b45786563757461626c655d20536574207265736f6c76657220666f72202e63656f20544c440a0a7c202a2a5374617475732a2a207c2054656d7020636865636b2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020207c0a7c202d2d2d2d2d2d2d2d2d2d207c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d207c0a7c2044697363757373696f6e207c205b4c696e6b5d2868747470733a2f2f646973637573732e656e732e646f6d61696e732f742f65786563757461626c652d7365742d7265736f6c7665722d666f722d63656f2d746c642f32303832302f3129207c0a0a23232041627374726163740a0a5b4550362e375d2868747470733a2f2f646973637573732e656e732e646f6d61696e732f742f65702d362d372d65786563757461626c652d7472616e736665722d63656f2d746c642d746f2d7468652d646e737365632d7265676973747261722f323035393429207265636f6e6669677572656420746865202e63656f20544c442c2073657474696e6720746865206f776e6572207265636f726420746f2074686520444e535345432072656769737472617220636f6e74726163742e205468697320616c6c6f776564206f6e636861696e20636c61696d696e67206f66202e63656f20324c447320746f20726573756d652c207265636c61696d696e6720636f6e74726f6c2066726f6d206120637573746f6d20726567697374726172207468617420686164206265656e2073657420627920612070726576696f7573206f776e6572206f66202e63656f2e0a0a556e666f7274756e6174656c792c2074686973206e65676c656374656420746f20636f6e736964657220746865206e656365737361727920696e66726173747275637475726520666f72206f6666636861696e20636c61696d696e672c20776869636820726571756972657320616c736f2073657474696e6720746865207265736f6c766572207265636f72642e204173206120726573756c742c206120666f6c6c6f772d75702065786563757461626c6520455020697320726571756972656420746f2073657420746865207265736f6c76657220616c736f2e0a0a546f2070726f7665206f776e657273686970206f66202e63656f20616e6420746865697220696e74656e74696f6e207468617420776520616374696f6e207468697320726571756573742c2074686579206861766520736574206120545854207265636f7264206f6e20605f656e732e6e69632e63656f6020746f207468652061646472657373206f662074686520444e53534543207265676973747261722c2060307842333263423536373761374339373136383932323845433833353830303433324233333962413242602e20546869732063616e20626520766572696669656420776974682074686520666f6c6c6f77696e6720636f6d6d616e643a0a0a6060600a64696720545854205f656e732e6e69632e63656f0a6060600a0a23232053706563696669636174696f6e0a0a312e2043616c6c20607365745375626e6f64654f776e657260206f6e2074686520454e532060526f6f746020636f6e74726163742061742060307861423532386436323645433237354533666144333633664631333933413431463538316335383937602c2070617373696e6720696e20746865206b656363616b3235362068617368206f66206063656f6020616e64207468652061646472657373206f662074686520454e532074696d656c6f636b2c2060307846653839636337614242324334313833363833616237313635334334636463394230324434346237602e0a322e2043616c6c20607365745265736f6c76657260206f6e2074686520454e5320726567697374727920636f6e74726163742061742060307830303030303030303030304332453037346543363941306446623239393742413643376432653165602c2070617373696e6720696e20746865206e616d6568617368206f66206063656f6020616e64207468652061646472657373206f662074686520604f6666636861696e444e535265736f6c766572602c2060307846313432423330386346363837643433353834313061346342383835353133623330413432303235602e0a332e2043616c6c20607365744f776e657260206f6e2074686520454e5320726567697374727920636f6e7472616374206174202060307830303030303030303030304332453037346543363941306446623239393742413643376432653165602c2070617373696e6720696e20746865206e616d6568617368206f66206063656f6020616e64207468652061646472657373206f662074686520444e535345432072656973747261722061742060307842333263423536373761374339373136383932323845433833353830303433324233333962413242602e00000000000000000000";

    function _selectFork() public override {
        vm.createSelectFork({ blockNumber: 22_531_399, urlOrAlias: "mainnet" });
    }

    function _proposer() public pure override returns (address) {
        return 0xb8c2C29ee19D8307cb7255e1Cd9CbDE883A267d5; // nick.eth
    }

    function _beforeProposal() public override {
        assertEq(root.owner(namehash("ceo")), dnsSecRegistrar);
        assertNotEq(root.resolver(namehash("ceo")), dnsSecResolver);
        assertEq(ensRegistry.owner(namehash("ceo")), address(timelock));
    }

    function _generateCallData()
        public
        override
        returns (address[] memory, uint256[] memory, string[] memory, bytes[] memory, string memory)
    {
        (targets, values, calldatas, description) =
            abi.decode(proposalCalldata, (address[], uint256[], bytes[], string));

        bytes[] memory internalCalldatas = new bytes[](3);
        internalCalldatas[0] =
            abi.encodeWithSelector(ENSRoot.setSubnodeOwner.selector, labelhash("ceo"), address(timelock));
        internalCalldatas[1] = abi.encodeWithSelector(ENSRoot.setResolver.selector, namehash("ceo"), dnsSecResolver);
        internalCalldatas[2] = abi.encodeWithSelector(ENSRegistry.setOwner.selector, namehash("ceo"), dnsSecRegistrar);
        bytes memory expectedCalldata = abi.encode(targets, values, internalCalldatas, description);

        assertEq(calldatas, internalCalldatas);
        assertEq(proposalCalldata, expectedCalldata);

        return (targets, values, signatures, calldatas, description);
    }

    function _afterExecution() public view override {
        assertEq(root.resolver(namehash("ceo")), dnsSecResolver);
        assertEq(root.owner(namehash("ceo")), dnsSecRegistrar);
        assertEq(ensRegistry.owner(namehash("ceo")), address(timelock));
    }

    function _isProposalSubmitted() public pure override returns (bool) {
        return true;
    }
}


// [0x8cb8ececa695017707ee0c04095f723270b3c315654d16e337ad54039175a4b000894676000000000000000000000000fe89cc7abb2c4183683ab71653c4cdc9b02d44b7, 0x1896f70a6871d4785070006a666d91b45c606e933e44f42b06ef5bda56431e78ce28553f000000000000000000000000f142b308cf687d4358410a4cb885513b30a42025, 0x5b0fc9c36871d4785070006a666d91b45c606e933e44f42b06ef5bda56431e78ce28553f000000000000000000000000b32cb5677a7c971689228ec835800432b339ba2b]
// [0x8cb8ececa695017707ee0c04095f723270b3c315654d16e337ad54039175a4b000894676000000000000000000000000fe89cc7abb2c4183683ab71653c4cdc9b02d44b7, 0x5b0fc9c36871d4785070006a666d91b45c606e933e44f42b06ef5bda56431e78ce28553f000000000000000000000000b32cb5677a7c971689228ec835800432b339ba2b, 0x1896f70a6871d4785070006a666d91b45c606e933e44f42b06ef5bda56431e78ce28553f000000000000000000000000f142b308cf687d4358410a4cb885513b30a42025]
